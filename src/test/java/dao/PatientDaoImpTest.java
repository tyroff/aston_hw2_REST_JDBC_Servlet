package dao;

import com.zaxxer.hikari.HikariConfig;
import com.zaxxer.hikari.HikariDataSource;
import model.Patient;
import org.junit.jupiter.api.AfterAll;
import org.junit.jupiter.api.BeforeAll;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.testcontainers.containers.PostgreSQLContainer;
import org.testcontainers.junit.jupiter.Container;
import org.testcontainers.junit.jupiter.Testcontainers;

import javax.sql.DataSource;
import java.sql.SQLException;
import java.util.List;

import static org.junit.jupiter.api.Assertions.*;

@Testcontainers
class PatientDaoImpTest {
    @Container
    public static PostgreSQLContainer<?> postgresContainer = new PostgreSQLContainer<>("postgres:latest")
            .withDatabaseName("bdTest")
            .withUsername("userTest")
            .withPassword("passwordTest");

    private static PatientDaoImp patientDaoImp;
    private static DataSource source;

    @BeforeAll
    public static void setUp() {
        HikariConfig config = new HikariConfig();
        config.setJdbcUrl(postgresContainer.getJdbcUrl());
        config.setUsername(postgresContainer.getUsername());
        config.setPassword(postgresContainer.getPassword());
        config.setDriverClassName("org.postgresql.Driver");

        source = new HikariDataSource(config);
        patientDaoImp = new PatientDaoImp(source);

        try (var connection = source.getConnection(); var statement = connection.createStatement()) {
            statement.execute(
                    """
                    CREATE TABLE IF NOT EXISTS patient(
                        id INT4 GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
                        lastName VARCHAR(200) NOT NULL,
                        firstName VARCHAR(200) NOT NULL,
                        patronymic VARCHAR(200),
                        job VARCHAR(300) NOT NULL,
                        doctors INT4[],
                        clinics INT4[])
                    """);
        } catch (SQLException e) {
            throw new RuntimeException(e);
        }
    }

    @BeforeAll
    public static void start() {
        postgresContainer.start();
    }

    @AfterAll
    public static void stop() {
        postgresContainer.stop();
    }

    @BeforeEach
    public void cleanData() {
        try (var connection = source.getConnection(); var statement = connection.createStatement()) {
            statement.execute("DELETE FROM patient");
        } catch (SQLException e) {
            throw new RuntimeException(e);
        }
    }

    @Test
    void getByIdTest() throws SQLException {
        Patient patient = new Patient();
        patient.setLastName("Lastname");
        patient.setFirstName("Firstname");
        patient.setPatronymic("Patronymic");
        patient.setJob("Job");
        patientDaoImp.save(patient);

        Patient extractPatient = patientDaoImp.getById((patient.getId()));
        assertNotNull(extractPatient);
        assertEquals(patient, extractPatient);
    }

    @Test
    void getAllTest() throws SQLException {
        List<Patient> patients;
        Patient patient1 = new Patient();
        patient1.setLastName("Lastname1");
        patient1.setFirstName("Firstname1");
        patient1.setPatronymic("Patronymic1");
        patient1.setJob("Job1");
        patientDaoImp.save(patient1);

        Patient patient2 = new Patient();
        patient2.setLastName("Lastname2");
        patient2.setFirstName("Firstname2");
        patient2.setPatronymic("Patronymic2");
        patient2.setJob("Job2");
        patientDaoImp.save(patient2);

        patients = patientDaoImp.getAll();
        assertNotNull(patients);
    }

    @Test
    void saveTest() throws SQLException {
        Patient patient = new Patient();
        patient.setLastName("Lastname saveTest");
        patient.setFirstName("Firstname saveTest");
        patient.setPatronymic("Patronymic saveTest");
        patient.setJob("Job saveTest");
        patientDaoImp.save(patient);

        Patient extractPatient = patientDaoImp.getById((patient.getId()));
        assertNotNull(extractPatient);
        assertEquals(extractPatient.getLastName(), "Lastname saveTest");
        assertEquals(extractPatient.getFirstName(), "Firstname saveTest");
        assertEquals(extractPatient.getPatronymic(), "Patronymic saveTest");
        assertEquals(extractPatient.getJob(), "Job saveTest");
    }

    @Test
    void updateTest() throws SQLException {
        Patient patient = new Patient();
        patient.setLastName("Lastname");
        patient.setFirstName("Firstname");
        patient.setPatronymic("Patronymic");
        patient.setJob("Job");
        patientDaoImp.save(patient);

        Patient extractPatient = patientDaoImp.getById((patient.getId()));
        Long extractPatientId = extractPatient.getId();
        extractPatient.setLastName("NewLastname");
        extractPatient.setFirstName("NewFirstname");
        extractPatient.setPatronymic("NewPatronymic");
        extractPatient.setJob("NewJob");

        patientDaoImp.update(extractPatient);

        assertEquals(extractPatient, patientDaoImp.getById(extractPatientId));
    }

    @Test
    void deleteByIdTest() throws SQLException {
        Patient patient = new Patient();
        patient.setLastName("Lastname deleteByIdTest");
        patient.setFirstName("Firstname deleteByIdTest");
        patient.setPatronymic("Patronymic deleteByIdTest");
        patient.setJob("Job deleteByIdTest");
        patientDaoImp.save(patient);

        Patient extractPatient = patientDaoImp.getById((patient.getId()));
        Long extractPatientId = extractPatient.getId();

        patientDaoImp.deleteById(extractPatientId);

        assertNull(patientDaoImp.getById(extractPatientId));
    }
}